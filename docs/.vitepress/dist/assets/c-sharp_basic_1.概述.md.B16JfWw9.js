import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.DNw8SpTU.js";const g=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"c-sharp/basic/1.概述.md","filePath":"c-sharp/basic/1.概述.md"}'),n={name:"c-sharp/basic/1.概述.md"},l=t(`<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><h2 id="语言特点" tabindex="-1">语言特点 <a class="header-anchor" href="#语言特点" aria-label="Permalink to &quot;语言特点&quot;">​</a></h2><h3 id="_1-面向对象" tabindex="-1">1.面向对象 <a class="header-anchor" href="#_1-面向对象" aria-label="Permalink to &quot;1.面向对象&quot;">​</a></h3><p>C# 支持类、对象、继承、多态等面向对象的编程概念，使开发者能够编写模块化、可重用的代码。</p><h3 id="_2-强类型语言" tabindex="-1">2.强类型语言 <a class="header-anchor" href="#_2-强类型语言" aria-label="Permalink to &quot;2.强类型语言&quot;">​</a></h3><p>C# 是一种强类型语言，意味着每个变量和表达式的类型在编译时就已经确定，有助于减少运行时错误。</p><h3 id="_3-跨平台" tabindex="-1">3.跨平台 <a class="header-anchor" href="#_3-跨平台" aria-label="Permalink to &quot;3.跨平台&quot;">​</a></h3><p>借助 .NET Core 和 .NET 5/6 等框架，C# 现在可以在 Windows、Linux 和 macOS 等多个平台上运行。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 2016 年 .NET Core 发布之前，C# 的主要开发平台是 Windows，依赖于 .NET Framework。虽然也有第三方的跨平台实现（如 Mono 和 Xamarin），但官方支持的跨平台能力是在 .NET Core 出现之后才开始正式广泛应用。</p></div><h3 id="_4-内存管理" tabindex="-1">4.内存管理 <a class="header-anchor" href="#_4-内存管理" aria-label="Permalink to &quot;4.内存管理&quot;">​</a></h3><p>C# 提供垃圾回收机制，自动管理内存分配和回收，减轻开发者的负担。</p><h3 id="_5-事件驱动" tabindex="-1">5.事件驱动 <a class="header-anchor" href="#_5-事件驱动" aria-label="Permalink to &quot;5.事件驱动&quot;">​</a></h3><p>C# 支持事件驱动的编程模型，可以用于开发 Windows、WPF、异步编程等多种场景。</p><h3 id="_6-异步编程" tabindex="-1">6.异步编程 <a class="header-anchor" href="#_6-异步编程" aria-label="Permalink to &quot;6.异步编程&quot;">​</a></h3><p>C# 的异步编程提供了一种简洁、高效的方式来处理耗时操作，避免阻塞线程，尤其是在 I/O 密集型任务中。async 和 await 关键字的引入大大简化了异步代码的编写，使得异步操作的可读性和可维护性得到了显著提升。</p><h3 id="_7-语言集成查询-linq" tabindex="-1">7.语言集成查询 (LINQ) <a class="header-anchor" href="#_7-语言集成查询-linq" aria-label="Permalink to &quot;7.语言集成查询 (LINQ)&quot;">​</a></h3><p>语言集成查询 (LINQ) 是一系列直接将查询功能集成到 C# 语言的技术统称。</p><p>对于编写查询的开发者来说，LINQ 最明显的“语言集成”部分就是查询表达式。 查询表达式采用声明性查询语法编写而成。 使用查询语法，可以用最少的代码对数据源执行筛选、排序和分组操作。 可使用相同的基本查询表达式模式来查询和转换 SQL 数据库、ADO .NET 数据集、XML 文档和流以及 .NET 集合中的数据。</p><h3 id="" tabindex="-1">…… <a class="header-anchor" href="#" aria-label="Permalink to &quot;……&quot;">​</a></h3><h2 id="与java对比" tabindex="-1">与Java对比 <a class="header-anchor" href="#与java对比" aria-label="Permalink to &quot;与Java对比&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">注意</p><p>以下仅代表个人观点，并不全面，请谨慎区分与选择.</p></div><h3 id="java独有的一些特性" tabindex="-1">Java独有的一些特性 <a class="header-anchor" href="#java独有的一些特性" aria-label="Permalink to &quot;Java独有的一些特性&quot;">​</a></h3><h4 id="_1-匿名内部类" tabindex="-1">1.匿名内部类 <a class="header-anchor" href="#_1-匿名内部类" aria-label="Permalink to &quot;1.匿名内部类&quot;">​</a></h4><p>Java 支持匿名内部类，即使得可以在代码中声明和使用没有名字的类。C# 虽然也支持匿名类型和局部函数，但没有完全相同的匿名内部类特性。</p><p>匿名内部类通常用于简化代码和实现临时的接口或抽象类的子类。</p><p>举个简单的例子，在java中匿名内部类可用于实现回调机制。</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CallbackExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onComplete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> performAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Callback </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        String result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Task Completed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        callback.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onComplete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CallbackExample example </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CallbackExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">performAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onComplete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Callback received with result: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>而在c#中一般需要使用事件来实现，在一定程度上可能增加了代码的分散性，不易阅读。</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> event</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnTaskCompleted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PerformAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Task Completed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OnTaskCompleted</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OnTaskCompleted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Event received with result:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        PerformAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-已检查异常" tabindex="-1">2.已检查异常 <a class="header-anchor" href="#_2-已检查异常" aria-label="Permalink to &quot;2.已检查异常&quot;">​</a></h4><p>在 Java 中，异常分为两大类：已检查异常（Checked Exception）和未检查异常（Unchecked Exception）。已检查异常是指在编译时被检查的异常，必须要么通过 try-catch 块处理，要么通过方法签名中的 throws 子句声明。</p><p>典型代表：常见的已检查异常包括 IOException、SQLException、ClassNotFoundException 等。</p><p>在 C# 中，理论上任何方法都可能引发任何异常。</p><h4 id="_3-已检查的数组协变" tabindex="-1">3.已检查的数组协变 <a class="header-anchor" href="#_3-已检查的数组协变" aria-label="Permalink to &quot;3.已检查的数组协变&quot;">​</a></h4><p>Java 中的数组协变指的是数组类型具有协变关系，也就是说，如果类型 B 是类型 A 的子类，那么类型 B[] 也是类型 A[] 的子类型。这种设计允许我们在使用父类型数组的地方替换为子类型数组。但是，数组的协变在运行时可能引发 ArrayStoreException。</p><p>在 C# 中，数组不是安全协变的。 如果需要协变结构，则应使用泛型集合类和接口。</p><h3 id="c-独有的一些特性" tabindex="-1">C#独有的一些特性 <a class="header-anchor" href="#c-独有的一些特性" aria-label="Permalink to &quot;C#独有的一些特性&quot;">​</a></h3><h4 id="_1-模式匹配" tabindex="-1">1.模式匹配 <a class="header-anchor" href="#_1-模式匹配" aria-label="Permalink to &quot;1.模式匹配&quot;">​</a></h4><p>模式匹配可以根据复杂数据结构的形状提供简洁的条件语句和表达式。</p><p>比如： is 语句可以用于类型检查和条件匹配，并且可以在匹配成功时直接声明和初始化一个新变量。</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;The string length is {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Length</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个例子中，is string s 不仅检查 obj 是否是 string 类型，还会将其转换并赋值给 s 变量</p><p>switch 语句自 C# 7.0 起支持模式匹配，可以基于类型和条件进行分支。</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (obj)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Integer: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;String: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Null object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Other type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-字符串插值" tabindex="-1">2.字符串插值 <a class="header-anchor" href="#_2-字符串插值" aria-label="Permalink to &quot;2.字符串插值&quot;">​</a></h4><p>字符串插值使你能够在字符串中插入已评估的表达式，而不是使用位置标识符。</p><h4 id="_3-可以为-null-的类型和不可为-null-的类型" tabindex="-1">3.可以为 null 的类型和不可为 null 的类型 <a class="header-anchor" href="#_3-可以为-null-的类型和不可为-null-的类型" aria-label="Permalink to &quot;3.可以为 null 的类型和不可为 null 的类型&quot;">​</a></h4><p>C# 通过向类型附加 ? 后缀来支持可以为 null 的值类型和可以为 null 的引用类型。 对于可以为 null 的类型，如果在取消引用表达式之前不检查是否有 null，编译器会发出警告。 对于不可为 null 的类型，如果向该变量分配 null 值，编译器会发出警告。 不可为 null 的引用类型可最大程度减少引发 System.NullReferenceException 的编程错误。</p><h4 id="_4-扩展方法" tabindex="-1">4.扩展方法 <a class="header-anchor" href="#_4-扩展方法" aria-label="Permalink to &quot;4.扩展方法&quot;">​</a></h4><p>在 C# 中，可以创建扩展类或接口的方法。 扩展方法可扩展库中某个类型的行为或实现给定接口的所有类型的行为。</p><h4 id="_5-linq" tabindex="-1">5.LINQ <a class="header-anchor" href="#_5-linq" aria-label="Permalink to &quot;5.LINQ&quot;">​</a></h4><p>语言集成查询 (LINQ) 提供了一种通用语法来查询和转换数据，无论其存储方式如何。</p><h4 id="_6-事件和委托" tabindex="-1">6.事件和委托 <a class="header-anchor" href="#_6-事件和委托" aria-label="Permalink to &quot;6.事件和委托&quot;">​</a></h4><p>语言集成查询 (LINQ) 提供了一种通用语法来查询和转换数据，无论其存储方式如何。</p><h4 id="-1" tabindex="-1">…… <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;……&quot;">​</a></h4><h3 id="常见差异" tabindex="-1">常见差异 <a class="header-anchor" href="#常见差异" aria-label="Permalink to &quot;常见差异&quot;">​</a></h3><h4 id="_1-类型系统" tabindex="-1">1.类型系统 <a class="header-anchor" href="#_1-类型系统" aria-label="Permalink to &quot;1.类型系统&quot;">​</a></h4><p>C#: 支持值类型和引用类型，提供了更丰富的类型系统，包括结构体（struct）、枚举（enum）以及自定义值类型。C# 中的 ref 和 out 参数允许引用传递。</p><p>Java: 主要使用引用类型，不支持值类型。Java 通过封装类（如 Integer、Double）实现原始类型的包装。</p><h4 id="_2-属性和方法" tabindex="-1">2.属性和方法 <a class="header-anchor" href="#_2-属性和方法" aria-label="Permalink to &quot;2.属性和方法&quot;">​</a></h4><p>C#: 支持属性（properties），这是一种简化字段访问的方法。C# 的属性允许直接读取和写入字段，背后实际上使用了 getter 和 setter 方法。</p><p>Java: 不直接支持属性概念，通常通过 getter 和 setter 方法来实现字段访问。</p><h4 id="_3-方法重载" tabindex="-1">3.方法重载 <a class="header-anchor" href="#_3-方法重载" aria-label="Permalink to &quot;3.方法重载&quot;">​</a></h4><p>C#: 支持方法重载、运算符重载、和具名参数。</p><p>Java: 支持方法重载，但不支持运算符重载，也没有具名参数。</p><h4 id="_4-编译和运行" tabindex="-1">4.编译和运行 <a class="header-anchor" href="#_4-编译和运行" aria-label="Permalink to &quot;4.编译和运行&quot;">​</a></h4><p>C#: 使用 csc 编译器，将代码编译成中间语言（IL），然后在运行时由 CLR 解释或编译为本地代码。</p><p>Java: 使用 javac 编译器，将代码编译成字节码（bytecode），然后由 JVM 执行。</p><h4 id="-2" tabindex="-1">…… <a class="header-anchor" href="#-2" aria-label="Permalink to &quot;……&quot;">​</a></h4><h3 id="如何选择" tabindex="-1">如何选择 <a class="header-anchor" href="#如何选择" aria-label="Permalink to &quot;如何选择&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">如果不用工作</p><p>选个P啊，我选择躺平。</p></div><div class="tip custom-block"><p class="custom-block-title">面试Java岗位</p><p>Java生态完，分布式、大数据、服务监控……啥都有包，而且稳定。</p><p>C#毛都没有，实现个AOP都非半天劲，啥都得自己写。那么多特性用不到，都是糟粕。</p><p>我当然选Java。C#狗都不用。</p></div><div class="tip custom-block"><p class="custom-block-title">面试C#岗位</p><p>.Net Core 优化了请求效率请求效率比Java效率高</p><p>Linq 优化了集合操作效率，计算效率比Java高（虽然Java有Stream编程，但相对Java，Linq还支持EF）</p><p>而且C#可以开发web，桌面应用，移动端。甚者可以写写C和C嘎嘎，一个人可以当成多个人用，节约学习成本。</p><p>至于生态，小型系统够用了。</p><p>我当然选C#。Java只会用轮子。</p></div><div class="tip custom-block"><p class="custom-block-title">技术选型</p><p>稳定的大规模企业系统、大数据处理或分布式系统，选Java。（也可以选c#但相对Java三方库选择很少）</p><p>如果是企业内部系统，在Windows上运行的测试工具、调试工具，选C#，可以很好的兼容Windows平台。 （选Java也行，你要用Swing开发桌面程序也不是不可以）</p><p>如果现有技术栈是C\\C++\\C#，选C#可以节约成本。</p><p>如果现有技术栈是Java，选Java可以节约成本。</p><p>如果现在没有技术栈，需要从头搭建，选Java。因为有一大批毕业生和培训机构在卷Java。</p></div><div class="danger custom-block"><p class="custom-block-title">写在最后</p><p>语言没有优劣之分，大多数情况下Java和C#都能满足开发需求，只是实现方式不同而已。</p><p>不要觉得用Java就有优越感，你所谓的优越感可能带不来丝毫好处。</p><p>不要觉得用C#就低人一等，挣钱不寒酸。</p><p>加油同志们！！！</p></div><h2 id="标准规范" tabindex="-1">标准规范 <a class="header-anchor" href="#标准规范" aria-label="Permalink to &quot;标准规范&quot;">​</a></h2><p>C# 语言规范是 C# 语言的权威来源。 该规范由 ECMA C# 标准委员会 (TC49-TG2) 制定。 委员会目前正在制定该标准的第 8 版。 此处发布的草稿包括部分但并非所有 C# 8 功能。 委员会使用 Microsoft 规范和语言设计会议 (LDM) 笔记来制定该规范。</p><p>详情参考 <a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/specification/overview" target="_blank" rel="noreferrer">c# 标准规范</a>。</p><h2 id="语言版本" tabindex="-1">语言版本 <a class="header-anchor" href="#语言版本" aria-label="Permalink to &quot;语言版本&quot;">​</a></h2><table tabindex="0"><thead><tr><th>目标</th><th>版本</th><th>C# 语言版本的默认值</th></tr></thead><tbody><tr><td>.NET</td><td>9.x</td><td>C# 13</td></tr><tr><td>.NET</td><td>8.x</td><td>C# 12</td></tr><tr><td>.NET</td><td>7.x</td><td>C# 11</td></tr><tr><td>.NET</td><td>6.x</td><td>C# 10</td></tr><tr><td>.NET</td><td>5.x</td><td>C# 9.0</td></tr><tr><td>.NET Core</td><td>3.x</td><td>C# 8.0</td></tr><tr><td>.NET Core</td><td>2.x</td><td>C# 7.3</td></tr><tr><td>.NET Standard</td><td>2.1</td><td>C# 8.0</td></tr><tr><td>.NET Standard</td><td>2.0</td><td>C# 7.3</td></tr><tr><td>.NET Standard</td><td>1.x</td><td>C# 7.3</td></tr><tr><td>.NET Framework</td><td>All</td><td>C# 7.3</td></tr></tbody></table><p>参考<a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/language-versioning" target="_blank" rel="noreferrer">C# 语言版本控制</a>。</p>`,81),h=[l];function p(e,k,r,d,E,o){return a(),i("div",null,h)}const y=s(n,[["render",p]]);export{g as __pageData,y as default};
