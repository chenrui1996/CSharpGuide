import{_ as a,c as e,o as r,a2 as o}from"./chunks/framework.DNw8SpTU.js";const t="/CSharpGuide/assets/%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2.BU8GX7jf.png",i="/CSharpGuide/assets/netframework.DkyfocE7.png",l="/CSharpGuide/assets/CLR.wnsgu8yg.png",s="/CSharpGuide/assets/CTS1.Cw0C1Vab.png",n="/CSharpGuide/assets/CTS.DjZp3c0-.png",p="/CSharpGuide/assets/Net%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C.DGD2HYOh.png",c="/CSharpGuide/assets/ILDemo.DtxFRovM.png",m="/CSharpGuide/assets/NETCore.Bx_dRssu.png",C="/CSharpGuide/assets/%E7%BC%96%E8%AF%91.DpzsBulQ.png",g=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"c-sharp/basic/0.概述.md","filePath":"c-sharp/basic/0.概述.md"}'),d={name:"c-sharp/basic/0.概述.md"},h=o('<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><p>C#（读作 &quot;C-Sharp&quot;）是由微软开发的一种现代化、通用、面向对象的编程语言。它是在 2000 年作为 <a href="#net">.NET</a>平台的一部分发布的，最初的设计是为了与 Java 和 C++ 竞争，并为开发人员提供一种易于使用但功能强大的语言。C# 继承了很多 C、C++ 和 Java 的特性，但也引入了许多改进和创新，旨在提高开发效率、安全性和可维护性。</p><h2 id="net" tabindex="-1">.NET <a class="header-anchor" href="#net" aria-label="Permalink to &quot;.NET&quot;">​</a></h2><p>.NET 是由 Microsoft 创建的开发平台，平台包含了语言规范、工具、运行，支持开发各种应用，如Web、移动、桌面等。.NET框架有多个实现，如.NET Framework、.NET Core（及后续的.NET 5+版本），以及社区版本Mono。</p><h3 id="net发展历史-framework-⇒-core" tabindex="-1">.NET发展历史: Framework ⇒ Core <a class="header-anchor" href="#net发展历史-framework-⇒-core" aria-label="Permalink to &quot;.NET发展历史: Framework ⇒ Core&quot;">​</a></h3><p>简单梳理一下.NET框架的发展： <img src="'+t+'" alt="An image"></p><p><a href="https://time.graphics/embed?v=1&amp;id=593132" target="_blank" rel="noreferrer">详细参考</a></p><h3 id="net-framework框架" tabindex="-1">.NET Framework框架 <a class="header-anchor" href="#net-framework框架" aria-label="Permalink to &quot;.NET Framework框架&quot;">​</a></h3><p>.NET Framework 是运行在 Windows 系列操作系统上的一个系统应用程序。它是 .NET 的核心部分，提供了建立和运行 .NET 应用程序所需要的编辑、 编译等核心服务。它包括2个重要组成部分：公共语言运行时 (Common Language Runtime，CLR) 和 .NET Framework 类库（Framework Class Library，FCL）。</p><p><img src="'+i+'" alt="An image"></p><div class="tip custom-block"><p class="custom-block-title">对于Framework：</p><ol><li><p>.NET Framework设计之初就是基于Windows系统的，其API与Windows底层接口紧密关联，所以DotNET应用也只能运行在Windows系统上了。同时，.NET Framework也作为Windows操作系统的组件内置在操作系统中。</p></li><li><p>同一台电脑上可以同时安装多个版本的 .NET Framework 版本。</p></li><li><p>.NET Framework = 运行时CLR + 类库FCL。</p></li></ol></div><h4 id="运行时-clr" tabindex="-1">运行时（CLR） <a class="header-anchor" href="#运行时-clr" aria-label="Permalink to &quot;运行时（CLR）&quot;">​</a></h4><p>公共语言运行时 (Common Language Runtime，CLR)， CLR 本质上就是.NET 虚拟机（类似Java的虚拟机JVM），算是.NET的引擎，用来执行托管.NET代码，确切的说是编译后的IL代码。提供管理内存、线程执行、代码执行、代码安全验证、异常处理、编译、垃圾回收等运行时服务。</p><p><img src="'+l+'" alt="An image"></p><p>其中：</p><ol><li>类加载器（Class Loader）：加载程序集的类（包括方法）、元数据，及其他程序所需组件。</li><li>即时编译器JIT（Just-In-Time，简称JIT ）：负责将中间代码MSIL翻译成本机执行代码（MSIL to Native Code）。</li><li>代码管理器（Code Manager）：管理代码的执行。</li><li>垃圾回收器GC（Garbage Collector）：负责整个.NET运行时托管代码的内存分配与释放任务，它通过一定的优化算法选择收集对象和时间，并进行自动的垃圾收集。</li><li>安全引擎（Security Engine）：提供基于认证的安全机制，如用户身份。</li><li>调试引擎（Debug Engine）：使开发者能调试和跟踪应用程序代码。</li><li>类型检查器（Type Checker）：检查并禁止非安全的类型转换以及未初始化的变量的使用。</li><li>异常管理器（Exception Manager）：提供结构化的异常处理，与Windows结构化异常处理机制（SHE）集成，改进了错误报告。</li><li>线程支持（Thread Support）：提供了多线程编程的类和接口</li></ol><h4 id="cts-通用类型系统" tabindex="-1">CTS（通用类型系统） <a class="header-anchor" href="#cts-通用类型系统" aria-label="Permalink to &quot;CTS（通用类型系统）&quot;">​</a></h4><p>.NET CLR是支持多种语言的，如C#、F#、VB等，这些语言编译后都可以在CLR上执行，还支持不同语言的互操作，比如在C#类继承一个VB写的类，在C#中调用F#写的一个方法等。</p><p>实现这种不同语言之间交互的基础就是这些语言都遵循统一的规范和要求 —— CTS（通用类型系统），CTS定义了一套通用的数据类型系统，包括值类型、引用类型的结构。比如C#中int、VB中的Interger都是整形，对应CTS中的Int32。</p><p><img src="'+s+'" alt="An image"></p><ol><li>CTS 提供了2种类型：引用类型、值类型。</li><li>CTS 规范规定，一个类型可以包含零个或多个成员。这些成员包括：字段(Field)、属性(Property)、方法(Method)、事件(Event)。</li><li>CTS 指定了类型可见性规则以及类型成员的访问规则，private、public 等。</li><li>CTS 还为类型继承、虚方法、对象生存期等定义了相应的规则。</li><li>CTS 规定：所有类型最终必须从预定义的 System.Object 类型继承，这里包括值类型也是从Object继承而来的。</li></ol><h4 id="cls-通用语言规范" tabindex="-1">CLS（通用语言规范） <a class="header-anchor" href="#cls-通用语言规范" aria-label="Permalink to &quot;CLS（通用语言规范）&quot;">​</a></h4><p>CLS是CTS的子集，规定了语言编译器必须遵循的一组规则，以便创建在 CLR 中运行的 .NET 应用程序。可以把CTS看做是规范，CLR是对CTS的具体实现。</p><p><img src="'+n+'" alt="An image"></p><h4 id="net-framework-类库-fcl-bcl" tabindex="-1">.NET Framework 类库（FCL/BCL） <a class="header-anchor" href="#net-framework-类库-fcl-bcl" aria-label="Permalink to &quot;.NET Framework 类库（FCL/BCL）&quot;">​</a></h4><p>类库（Framework Class Library，FCL）就是.NET Framework内置的各种组件服务，如ASP.NET、MVC、WCF和WPF等组件，满足不同编程应用场景的需求。</p><p>基础类库BCL（Base Class Library）是FCL的一个子集，顾名思义就是一些比较基础、通用的类库，如基本数据类型、集合、线程、安全、字符串操作、网络操作、IO、XML操作等等，大多都包含在System命名空间下，如System.Text、System.IO。其他一些常用的名词，如核心 .NET 库、框架库、运行时库、共享框架，大多都指的是BCL。</p><h4 id="语言-运行机制" tabindex="-1">语言&amp;运行机制 <a class="header-anchor" href="#语言-运行机制" aria-label="Permalink to &quot;语言&amp;运行机制&quot;">​</a></h4><p>.NET是为了支持多种语言而设计的，如Microsoft自己发布的VB.NET、Managed C++、C#、J#和JScript.NET，还有其他厂商开发的语言，如Cobol、Smalltalk、Perl和 Eiffel等几十种编程语言。</p><p>无论使用哪种语言来编写源代码，都会通过编译器编译成中间代码MSIL（Microsoft Intermediate Language）。语言的集成性主要是公共语言规范（CLS）和通用类型系统（CTS）一起确保了语言的相互操作性。CLS是一个最低标准集，所有面向.NET的编译器都必须支持它，每个语言都符合这个规范，从而满足了语言的互相调用和互操作。</p><p><img src="'+p+'" alt="An image"></p><p>每种语言都有自己的编译器，将源代码编译成中间语言（MSIL，或IL），然后在CLR上运行，主要分为两个阶段：</p><ol><li>编译阶段：由MSBuild把源代码编译为中间语言IL代码，编译后就是EXE、DLL格式的文件。</li><li>运行阶段：CLR把中间语言CIL代码编译为平台专用的机器代码，最终在CPU上运行的就是机器码（汇编代码）。</li></ol><div class="tip custom-block"><p class="custom-block-title">Microsoft中间语言</p><p>Microsoft中间语言（MSIL），也称为通用中间语言（CIL/IL：Common Intermediate Language），是一组与平台无关的指令，在CLR中运行时由JIT按需编译为机器码执行。</p></div><p>下图为一个打印hello world的IL代码，通过内置工具ildasm可以查看。 <img src="'+c+'" alt="An image"></p><h3 id="net-core-框架" tabindex="-1">.NET Core 框架 <a class="header-anchor" href="#net-core-框架" aria-label="Permalink to &quot;.NET Core 框架&quot;">​</a></h3><p>.NET Core是一个免费、跨平台、开源的开发平台，用于一站式构建不同类型的应用程序。.NET Core 是以.NET Framework 为基础，但是经过重新设计、实现的的新一代框架，实现了原.NET Framework 中的几乎所有功能，核心特点就是开源、跨平台。 <img src="'+m+'" alt="An image"></p><h4 id="运行时-net-runtime" tabindex="-1">运行时.NET Runtime <a class="header-anchor" href="#运行时-net-runtime" aria-label="Permalink to &quot;运行时.NET Runtime&quot;">​</a></h4><p>运行时.NET Runtime 有两种，CoreCLR，功能和.NET Framework的CLR差不多；.NET Native RunTime（CoreRT/NativeAOT）是直接将C#代码编译为机器码的运行时，还只是一个实验性的运行时。</p><p>Core CLR 是一个跨平台的运行时，移植了 .NET Framework 的 CLR 的功能，包含核心程序库 mscorlib、JIT 编译器、垃圾收集器 (GC) 以及其他运行 MSIL 所需要的运行期环境。</p><h4 id="bcl-corefx" tabindex="-1">BCL/CoreFX <a class="header-anchor" href="#bcl-corefx" aria-label="Permalink to &quot;BCL/CoreFX&quot;">​</a></h4><p>类库，即 Base Classlibrary 基础类，包含 File、System、Console、XML、ADO.NET、日期时间等类库。Core FX就是.NET Core的BCL。</p><h4 id="app-model" tabindex="-1">App Model <a class="header-anchor" href="#app-model" aria-label="Permalink to &quot;App Model&quot;">​</a></h4><p>一站式构建 Web、桌面和移动等应用的模型</p><h4 id="编译" tabindex="-1">编译 <a class="header-anchor" href="#编译" aria-label="Permalink to &quot;编译&quot;">​</a></h4><p>通常情况下，我们写的C#代码被编译为中间代码IL，在运行期间由CLR的JIT编译器编译为机器码执行。这样势必造成运行的一些延迟，如果知道目标平台，则可以为该目标平台提前编译为机器码，这就是所谓的提前编译（AOT），它的优点是启动时间更快。</p><ol><li>JIT（Just In Time Compiler，即时编译），顾名思义，在需要（运行代码）的时候才会被编译为机器码。当然编译好后会被缓存，以便于后续执行，这也是为什么.NET程序预热后执行更快的原因，不过程序关闭就没了。</li><li>AOT编译（Ahead of Time Compilation，预先编译或静态编译），在构建（发布）时将高级语言编译为本地机器码，让程序更快的启动、运行。可以将.NET Core程序编译成原生（机器）代码，不依赖 .NET 运行时而运行在宿主机器上。</li></ol><p><img src="'+C+'" alt="An image"></p><div class="tip custom-block"><p class="custom-block-title">托管代码和非托管代码</p><p>托管代码（Managed Code）是指在受管理环境中运行的代码，通常指的是.NET语言（C#、VB）开发的代码，在CLR运行时环境中运行。由CLR来负责内存管理、垃圾回收、类型安全性和异常处理等任务，所以我们写（C#）托管代码时，就可以随意申明变量、创建对象，而不用去管内存的分配、管理和回收，使得代码更容易编写、维护和调试。</p><p>相对而言，非托管代码（Unmanaged Code）就是没有专门的执行管理环境，通常使用低级编程语言（如C、C++）编写，开发人员需要手动处理内存管理、异常和资源释放等问题。</p><div class="danger custom-block"><p class="custom-block-title">注意</p><p>在实际的C#的开发中，我们也会经常用到非托管资源，如IO、文件流操作，就需要注意要手动释放（非托管）资源，避免内存溢出。</p></div></div><div class="tip custom-block"><p class="custom-block-title">.NET Standard</p><p>.NET Standard 是针对多个.NET框架 实现推出的一套正式的 .NET API 规范，目的是在多个.NET 框架间共享代码，如在.NET Framework 、 .NET、Mono间共享代码，提高 .NET 生态系统中的一致性。</p><p>.NET Standard 是一组标准化的 API规范，“.NET Standard Library”指的也是这个API标准库，注意只是一组规范，具体实现就是 .NET Framework、NET Core 和 Mono</p></div><h2 id="ecma-标准" tabindex="-1">Ecma 标准 <a class="header-anchor" href="#ecma-标准" aria-label="Permalink to &quot;Ecma 标准&quot;">​</a></h2><p>ECMA（European Computer Manufacturers Association，欧洲计算机制造商协会）是一个国际性的标准化组织，致力于制定和推广信息和通信技术的标准。</p><p>.NET体系中的C#语言、公共语言基础（CLI）也是有标准规范的，</p><p>详情参考 <a href="https://learn.microsoft.com/zh-cn/dotnet/fundamentals/standards" target="_blank" rel="noreferrer">Ecma 标准</a>。</p><div class="tip custom-block"><p class="custom-block-title">CLI</p><p>CLI（Common Language Infrastructure）公共语言基础结构：是一系列规范标准的总称，包括CTS、CLS、CIL、元数据、执行系统等多种规范，.NET、Mono就是他的实现，由国际标准组织ECMA维护。</p></div><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><ol><li><p><a href="https://learn.microsoft.com/zh-cn/dotnet/csharp/" target="_blank" rel="noreferrer">C# 指南</a></p></li><li><p><a href="https://www.yuque.com/kanding/ktech/csharp.net" target="_blank" rel="noreferrer">C#.NET体系图文概述</a></p></li></ol>',57),T=[h];function E(u,N,L,b,k,S){return r(),e("div",null,T)}const _=a(d,[["render",E]]);export{g as __pageData,_ as default};
